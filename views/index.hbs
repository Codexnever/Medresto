<style>
  * {
    font-family: 'Open Sans', sans-serif;
  }

  .cards-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
  }

  .card {
    position: relative;
    padding: 0px;
    margin: 10px;
    border-radius: 10px;
    border: 3px solid rgb(152, 152, 152);
    display: inline-block;
    justify-content: center;
    width: 270px;
    height: 300px;
    overflow: auto;
  }

  .green-border {
    border: 3px solid green;
  }

  .yellow-border {
    border: 2px solid rgb(155, 155, 155);
    animation-name: blinking;
    animation-duration: 1s;
    animation-iteration-count: infinite;
  }

  @keyframes blinking {
    50% {
      border-color: #e1f500;
    }
  }

  .red-border {
    border: 2px solid rgb(128, 128, 128);
    animation-name: blink;
    animation-duration: 1s;
    animation-iteration-count: infinite;
  }

  @keyframes blink {
    50% {
      border-color: #ff9203;
    }
  }

  .container {
    width: 100%;
    background-color: #69c920;
    position: sticky;
    bottom: 0px;
    z-index: 1;
    border-radius: 0px 0px 7px 7px;
    padding: 2px;
    color: white;
    box-sizing: border-box;
  }


  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: -10px;
    position: relative;
    z-index: 0;

  }

  th,
  td {
    border: 1px solid #ddd;
    padding: 0px;
    text-align: left;
    padding-right: 0px;
  }

  th {
    background-color: #f2f2f2;
  }

  .card:hover {
    box-shadow: 6px 0px 8px 6px #808080;
  }

  .btn {
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 1;
  }

  .btn button {
    border-radius: 5px;
  }

  .btn p {
    margin-left: auto;
  }

  .dropbtn {
    background-color: white;
    color: rgb(248, 0, 0);
    padding: 10px;
    font-size: 15px;
    border: none;
    z-index: 10;
    font-weight: 1000;
  }

  .dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown-content {
    display: none;
    position: static;
    background-color: #ebebeb;
    height: 200px;
    min-width: 150px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1000;
    overflow: visible;
  }

  .dropdown-content a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
    overflow: auto;
    z-index: 5;
  }

  .dropdown-content a:hover {
    background-color: #ddd;
  }

  .dropdown:hover .dropdown-content {
    display: block;
    z-index: 5;
  }

  .dropdown:hover .dropbtn {
    background-color: #ffffff;
  }

  .card-content {
    position: relative;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .card-content table {
    flex: 1;
    overflow-y: auto;
  }

  .card-content tbody {
    max-height: calc(40px * 4);
    overflow-y: auto;
  }

  .hidden {
    display: none;
  }

  .time-difference span {
    font-weight: bold;
    color: #ffffff;
  }

  .time-difference {
    margin-top: 10px;
  }

  select {
    border: none;
    padding: 17px, 20px;
    border-radius: 5px;
  }

  select:focus {
    outline: none;
  }

  #orderStatus option.x[selected] {
    color: red;
  }
</style>

<script>
  //down
  async function testing(kotId, value) {
    try {
      if (value === 'java') {
        await cancelOrderStatus(kotId);
      } else {
        const comment = `The order is ${value}`;
        await sendCommentToServer(kotId, comment);

        console.log(`Comment set for kotItemId ${kotId}: ${comment}`);
      }
    } catch (error) {
      console.error('An error occurred:', error);
    }
  }

  async function sendCommentToServer(kotId, comment) {
    try {
      const response = await fetch(`/api/update-comment/${kotId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          comment: "This is comment",
        }),
      });

      if (!response.ok) {
        throw new Error(`Failed to update comment: ${response.status}`);
      }

      const result = await response.text();
      console.log(result);  // Log the response from the server
    } catch (error) {
      console.error('Error updating comment:', error);
    }
  }



  //id dismiss
  async function cancelOrderStatus(kotId) {
    try {
      const response = await fetch(`http://localhost:3000/api/cancel-order/${kotId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });

      if (response.ok) {
        console.log(`Status set to 0 for kotId: ${kotId}`);
      } else {
        console.error(`Error setting status to 0 for kotId: ${kotId}. Server returned status: ${response.status}`);
      }
    } catch (error) {
      console.error('An error occurred while setting status:', error);
    }
  }
  //row
  async function cancelOrder(kotId, kotItemId) {
    console.log('Cancel order for kotId:', kotId, 'and kotItemId:', kotItemId);

    try {
      const response = await fetch(`http://localhost:3000/api/update-item-status?kotId=${kotId}&itemId=${kotItemId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
      //row delete 
      if (response.ok) {
        console.log(`Order canceled successfully for kotId: ${kotId}, kotItemId: ${kotItemId}`);


        const itemRow = document.querySelector(`tr[data-kot-id="${kotId}"][data-item-id="${kotItemId}"]`);
        if (itemRow) {
          itemRow.remove();
        } else {
          console.error(`Item row with kotId ${kotId} and itemId ${kotItemId} not found`);
        }
      } else {
        console.error(`Error canceling order for kotId ${kotId}, kotItemId: ${kotItemId}. Server returned status: ${response.status}`);
      }
    } catch (error) {
      console.error('An error occurred while canceling order:', error);
    }

  }
  // particular for per atom inside that table
  async function handleOrderStatus(kotId, kotItemId, selectedValue) {
    if (selectedValue === 'alpha') {

      cancelOrder(kotId, kotItemId);
    } else if (selectedValue === 'beta') {

    } else if (selectedValue === 'gama') {

    } else if (selectedValue === 'proton') {

    } else {

    }
  }
  function handleOrderClick(kotId, kotItemId, selectedValue) {
    handleOrderStatus(kotId, kotItemId, selectedValue);
  }


  //outside the table


  document.addEventListener('DOMContentLoaded', function () {
    function updateCardBorders() {
      const cards = document.querySelectorAll('.card');
      cards.forEach((card) => {
        const createdAtString = card.getAttribute('data-time');
        if (createdAtString !== null && createdAtString !== undefined) {
          let createdAt = new Date(createdAtString);
          const currentTime = new Date();
          const timeElapsed = (currentTime - createdAt) / 1000 / 60;
          const timeElapsedd = (currentTime - createdAt) / 1000 / 60;

          const timeDiffElement = card.querySelector('.time-diff-value');
          if (timeDiffElement) {
            timeDiffElement.innerText = timeElapsedd.toFixed(2);
          }

          if (!isNaN(createdAt) && timeElapsed >= 0) {
            card.classList.remove('green-border', 'yellow-border', 'red-border');
            if (timeElapsed < 3) {
              console.log('Adding green-border');
              card.classList.add('green-border');
            } else if (timeElapsed >= 3 && timeElapsed < 6) {
              console.log('Adding yellow-border');
              card.classList.add('yellow-border');
            } else if (timeElapsed >= 6 && timeElapsed <= 10) {
              console.log('Adding red-border');
              card.classList.add('red-border');
            } else {
              console.log('Time up');
              // Time exceeded 10 min alert
              // console.log('Time is Running, Hurry up!');
            }

            const timerElement = card.querySelector('.timer');
            if (timerElement) {
              timerElement.innerText = timeElapsedd.toFixed(2);
            }
          } else {
            console.error('Invalid date format:', createdAtString);
          }
        } else {
          console.log("Time attribute not found");
        }
      });
    }

    updateCardBorders();

    setInterval(updateCardBorders, 60000);
  });

</script>


<div class="cards-container">
  {{#each records}}
  <div class="card" data-time="{{this.myTime}}">
    <div class="card-content">
      <div style="display: flex; justify-content: space-between; margin-bottom: 10px; background-color:#59a61f; width: 100%; height:60px; border-radius: 6px 6px 0px 0px;
  position: sticky; 
    top: 0px; z-index:3;bottom:0px ">
        <p style="margin-right: 0px; margin-left: 20px;color:white;"><strong>KOT:</strong> {{this.kotId}}</p>
        <p style="color: white;"><strong></strong> {{this.KotOrder}}</p>
        <p style="color: white; margin-right: 15px;"><strong></strong> {{this.orderType}}</p>
      </div>
      <table>
        <thead>
          <tr data-kot-id="{{this.kotId}}" data-item-id="{{this.kotItemId}}">
            <th></th>
            <th>Qty</th>
            <th>Product</th>
          </tr>
        </thead>
        <tbody>
          {{#each this.secondData}}


          <tr data-kot-id="{{this.kotId}}" data-item-id="{{this.itemId}}">
            <td>
        



              <div class="dropdown">
                <button onclick="handleOrderStatus('{{this.kotId}}', '{{this.kotItemId}}', this.value)"
                  class="dropbtn">X</button>
                <div id="myDropdown" class="dropdown-content">
                  <a href="#" class="alpha"
                    onclick="handleOrderClick('{{this.kotId}}', '{{this.kotItemId}}', 'alpha')">Rejected</a>
                  <a href="#" class="beta"
                    onclick="handleOrderClick('{{this.kotId}}', '{{this.kotItemId}}', 'beta')">Ready</a>
                  <a href="#" class="gama"
                    onclick="handleOrderClick('{{this.kotId}}', '{{this.kotItemId}}', 'gama')">Preparing</a>
                  <a href="#" class="proton"
                    onclick="handleOrderClick('{{this.kotId}}', '{{this.kotItemId}}', 'proton')">Placed</a>
                </div>
              </div>
            </td>

            <td>{{this.qty}}</td>
            <td>{{this.itemName}}</td>
          </tr>


          {{/each}}
        </tbody>
      </table>
      <div class="container">
        <div class="btn">


          {{!--down --}}
          {{!-- cancelOrderStatus('{{this.kotId}}')"> --}}

          <select name="orderStatus" id="orderStatus" onchange="testing('{{this.kotId}}',this.value)">
            <option value="javascript">Preparing</option>
            <option value="pythonn">Ready</option>
            <option value="python">Placed</option>
            <option value="ruby">Served</option>
            <option value="java">Cancel</option>
          </select>
          {{!-- <a href="#">Placed</a>
          <a href="#">Preparing</a>
          <a href="#">Ready</a>
          <a href="#">Served</a>
          <a href="#">Cancel</a> --}}

          <div class="time-difference">
            <p><span class="time-diff-value"></span>Min</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  {{/each}}
</div>
</div>
